current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
my.df
?one.zillion
?hit
my.list <- vector('list', n)
this.N <- rpois(1, 10)
my.list <- vector('list', n)
for(i in 1:n) {
this.N <- rpois(1, 10)
my.list[[i]] <- data.frame(a=sample(letters, this.N, replace=TRUE), b=runif(this.N), stringsAsFactors=FALSE)
}
my.df <- do.call('rbind', my.list)
my.df
?do.call
?cat
cat('point 1 mem', memory.size(), memory.size(max=TRUE), '\n')
?Rprof
??Memory-limi
??Memory-limits
??Memo
?outer
?integrate
max(2, 100)
mean(2, 100)
mean(c(2, 100))
mean(100, 2)
mean(c(100, 2), 3)
mean(c(100, 2), c(3))
mean(c((c(100, 2), c(3))))
mean(c(c(100, 2), c(3)))
mean(c(c(100, 1), c(1)))
?all.equal
seq(10, by=2)
seq(1, 10, by=2)
seq(1, 11, by=2)
seq(2, 11, by=2)
b1 <- seq(1, 11, by=2)
b2 <- seq(2, 11, by=2)
all.equal(b1, b2)
b1 <- seq(1, 10, by=2)
b2 <- seq(2, 10, by=2)
all.equal(b1, b2)
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, 1))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .01))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .1))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
data(iris)
iris$Species
head(iris)
textfile <- 'data/pg100.txt'
if (!file.exists(textfile)) {
download.file('http://www.gutenberg.org/cache/epub/100/pg100.txt', destfile=textfile)
}
if (!file.exists(textfile)) {
download.file('http://www.gutenberg.org/cache/epub/100/pg100.txt', destfile=textfile)
}
shakespeare=readLines(textfile)
length(shakespeare)
head(shakespeare)
tail(shakespeare)
shakespeare <- shakespeare[-(1:173)]
head(shakespeare)
shakespeare <- shakespeare[-(124195:length(shakespeare))]
tail(shakespeare)
v <- letters[1:10]
v
paste(v, collapse=':')
shakespeare <- paste(shakespeare, collapse=' ')
nchar(shakespeare)
s1 <- strsplit(shakespeare, "<<[^>]*>>")[[1]]
str(s1)
s1[[1]]
s1[[2]]
s1[[3]]
length(shakespeare)
length(shakespeare[[1]])
length(s1[[1]])
length(s1)
s1 <- strsplit(shakespeare, "<<[^>]*>>")
str(s1)
shakespeare <- strsplit(shakespeare, "<<[^>]*>>")[[1]]
length(shakespeare)
(dramatis.personae <- grep('Dramatis Personae', shakespeare, ignore.case=TRUE))
length(shakespeare)
shakespeare <- shakespeare[-dramatis.personae]
length(shakespeare)
library(tm)
install.packages('tm')
library(tm)
doc.vec <- VectorSource(shakespeare)
class(doc.vec)
str(doc.vec)
doc.corpus <- Corpus(doc.vec)
class(doc.corpus)
str(doc.corpus)
summary(doc.corpus)
?stopwords
stopwords('english')
doc.corpus <- tm_map(doc.corpus, tolower)
doc.corpus <- tm_map(doc.corpus, removePunctuation)
doc.corpus <- tm_map(doc.corpus, removeNumbers)
doc.corpus <- tm_map(doc.corpus, removeWords, stopwords('english'))
library(SnowballC)
install.packages('SnowballC')
doc.corpus <- tm_map(doc.corpus, stemDocument)
doc.corpus <- tm_map(doc.corpus, stripWhitespace)
inspect(doc.corpus[8])
head(inspect(doc.corpus[8]))
tdm <- TermDocumentMatrix(doc.corpus)
tdm
inspect(tdm[1:10, 1:10])
dtm <- DocumentTermMatrix(doc.corpus)
inspect(dtm[1:10,1:10])
findFreqTerms(tdm, 2000)
findAssocs(tdm, 'love', 0.8)
tdm.common <- removeSparseTerms(tdm, 0.1)
dim(tdm)
dim(tdm.common)
inspect(tdm.common[1:10, 1:10])
library(slam)
tdm.dense <- as.matrix(tdm.common)
object.size(tdm.common)
object.size(tdm.dense)
tdm.dense <- melt(tdm.dense, value.name='count')
library(reshape2)
tdm.dense <- melt(tdm.dense, value.name='count')
tdm.d <- melt(tdm.dense)
head(tdm.dense)
head(tdm.d)
library(ggplot2)
ggplot(tdm.dense, aes(x=Docs, y=Terms, fill=log10(count))) +
geom_tile(colour='white') +
scale_fill_gradient(high='#FF0000', low='#FFFFFF') +
ylab('') +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nosql.df <- read.csv("nosql.csv", header=TRUE)
head(nosql)
head(nosql.df)
source('~/.active-rstudio-document', echo=TRUE)
nosql.df$Database <- factor(nosql.df$Database,
levels=c("Cassandra","MongoDB","Redis","HBase","CouchDB",
"Neo4j","Riak","MarkLogic","Couchbase","DynamoDB"))
gg <- ggplot(data=nosql.df, aes(x=Quarter, y=Index))
gg <- gg + geom_point(aes(color=Quarter), size=3)
gg <- gg + facet_grid(Database~.)
gg <- gg + theme_bw()
gg <- gg + labs(x="", title="NoSQL LinkedIn Skills Index\nSeptember 2013")
gg <- gg + theme(legend.position = "none")
gg <- gg + theme(strip.text.x = element_blank())
gg
gg <- gg + coord_flip()
gg
gg <- ggplot(data=nosql.df, aes(x=Quarter, y=Index))
gg <- gg + geom_point(aes(color=Quarter), size=3)
gg <- gg + facet_grid(Database~.)
gg <- gg + coord_flip()
gg <- gg + labs(x="", title="NoSQL LinkedIn Skills Index\nSeptember 2013")
gg <- gg + theme(legend.position = "none")
gg <- gg + theme(strip.text.x = element_blank())
gg
gg + theme_bw()
gg
require(reshape2)
require(ggplot2)
df <- data.frame(Butterfinger = rnorm(50, 25, 10),
Snickers = rnorm(50, 75, 20),
Skor = rnorm(50, 115, 35),
AlmondJoy = rnorm(50, 45, 5))
head(df)
df.melt <- melt(df)
df.melt$variable <- factor(df.melt$variable,
levels=c('Snickers', 'Skor', 'AlmondJoy', 'Butterfinger'))
head(df.melt)
ggplot(df.melt, aes(x=variable, y=value)) + geom_boxplot()
levels(df.melt$variable)
sort(levels(df.melt$variable))
df.melt$variable <- factor(df.melt$variable,
levels=sort(levels(df.melt$variable)))
ggplot(df.melt, aes(x=variable, y=value)) + geom_boxplot()
gg
bmi <- rnorm(n=1000, m=24.2, sd=2.2)
hist(bmi)
set.seed(123)
bmi <- rnorm(n=1000, m=24.2, sd=2.2)
hist(bmi)
histinfo
histinfo <- hist(bmi)
histinfo
hist(bmi, breaks=20, main='Breaks=20')
hist(bmi, breaks=5, main='Breaks=5')
hist(bmi, breaks=c(17, 20, 23, 26, 29, 32), main='Breaks is a vector of breakpoints')
hist(bmi, freq=FALSE, main='Density')
hist1 <- hist(bmi, plot=FALSE)
hist1 <- hist(bmi)
hist1 <- hist(bmi, plot=FALSE)
hist1$density
hist2 <- hist(bmi, plot=FALSE, breaks=c(17, 25, 26, 32 ))
hist2
hist3 <- hist(bmi, breaks=c(17, 25, 26, 32 ))
sum(hist2$density)
diff(hist2$breaks)
sum(diff(hist2$breaks) * hist2$density)
hist(bmi,
freq=FALSE,
xlab='Body Mass Index',
main='Distribution of Body Mass Index',
col='lightgreen',
xlim=c(15, 35),
ylim=c(0, 0.2))
curve(dnorm(x, mean=mean(bmi), sd=sd(bmi), add=TRUE, col='darkblue', lwd=2))
curve(dnorm(x, mean=mean(bmi), sd=sd(bmi)), add=TRUE, col='darkblue', lwd=2)
hist3 <- hist(bmi,
freq=FALSE,
xlab='Body Mass Index',
main='Distribution of Body Mass Index',
col='lightgreen',
xlim=c(15, 35),
ylim=c(0, 0.2))
hist3 + curve(dnorm(x, mean=mean(bmi), sd=sd(bmi)), add=TRUE, col='darkblue', lwd=2)
curve(dnorm(x, mean=mean(bmi), sd=sd(bmi)), add=TRUE, col='darkblue', lwd=2)
plot.new
hist(bmi,
freq=FALSE,
xlab='Body Mass Index',
main='Distribution of Body Mass Index',
col='lightgreen',
xlim=c(15, 35),
ylim=c(0, 0.2))
plot.new()
hist(bmi,
freq=FALSE,
xlab='Body Mass Index',
main='Distribution of Body Mass Index',
col='lightgreen',
xlim=c(15, 35),
ylim=c(0, 0.2))
curve(dnorm(x, mean=mean(bmi), sd=sd(bmi)), add=TRUE, col='darkblue', lwd=2)
hist3 <- hist(bmi,
freq=FALSE,
xlab='Body Mass Index',
main='Distribution of Body Mass Index',
col='lightgreen',
xlim=c(15, 35),
ylim=c(0, 0.2))
library(spatstat)
clear()
cl()
?clear
??clear
cls
cls()
mtcars
set.seed(123)
round(runif(12,1,10))
bmi <- rnorm(n=1000, m=24.2, sd=2.2)
df <- data.frame(Butterfinger = rnorm(50, 25, 10),
Snickers = rnorm(50, 75, 20),
Skor = rnorm(50, 115, 35),
AlmondJoy = rnorm(50, 45, 5))
df <- data.frame(Butterfinger = rnorm(50, 25, 10),
Snickers = rnorm(50, 75, 20),
Skor = rnorm(50, 115, 35),
AlmondJoy = rnorm(50, 45, 5))
size(df)
shape(df)
dim(df)
df.head
head(df)
set.seed(123)
# round(runif(12,1,10))
# bmi <- rnorm(n=1000, m=24.2, sd=2.2)
df <- data.frame(Butterfinger = rnorm(50, 25, 10),
Snickers = rnorm(50, 75, 20),
Skor = rnorm(50, 115, 35),
AlmondJoy = rnorm(50, 45, 5))
df[, c('Snickers', 'Skor')]
df[1:4, c('Snickers', 'Skor')]
df[4:8, c('Snickers', 'Skor')]
df[df$Skor > 100,]
df[df$Skor > 150,]
head(mtcars, 10)
rownames(mtcars)
mtcars[grep('Mazda', rownames(mtcars), ignore.case=T),]
mtcars[grep('wag', rownames(mtcars), ignore.case=T),]
mtcars[grep('Mazda', rownames(mtcars), ignore.case=T), -'hp']
mtcars[grep('Mazda', rownames(mtcars), ignore.case=T), -c('hp')]
rownames(df) %% 2
as.numeric(rownames(df)) %% 2
as.numeric(rownames(df)) %% 2 == 0
df[as.numeric(rownames(df)) %% 2 == 0,]
set.seed(123)
# round(runif(12,1,10))
# bmi <- rnorm(n=1000, m=24.2, sd=2.2)
df <- data.frame(Butterfinger = rnorm(25, 25, 10),
Snickers = rnorm(25, 75, 20),
Skor = rnorm(25, 115, 35),
AlmondJoy = rnorm(25, 45, 5))
df[as.numeric(rownames(df)) %% 2 == 0,]
df[as.numeric(rownames(df)) %% 2 == 0,]
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150,]
colnames(df)
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150, grep('^A', colnames, ignore.case=T)]
grep('^A', colnames, ignore.case=T)
grep('^A', colnames(df), ignore.case=T)
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150, grep('^A', colnames(df), ignore.case=T)]
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150, grep('^[AB]', colnames(df), ignore.case=T)]
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150, grep('[^AB]', colnames(df), ignore.case=T)]
df[as.numeric(rownames(df)) %% 2 == 0 & df$Skor > 150, grep('^[^AB]', colnames(df), ignore.case=T)]
set.seed(1)
normal.numbers <- rnorm(100)
normal.ecdf <- ecdf(normal.numbers)
head(normal.ecdf)
normal.ecdf
plot(normal.ecdf, xlab='Quantiles of Random Standard Normal Numbers', ylab='', main='Empirical Cumluative Distribution\nStandard Normal Quantiles')
mtext(text=expression(hat(F)[n](x)), side=2, line=2.5)
ozone <- airquality$Ozone
str(airquality)
n <- sum(!is.na(ozone))
ozone.ecdf <- ecdf(ozone)
ozone.ecdf
plot(ozone.ecdf, xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
mtext(text = expression(hat(F)[n](x)), side = 2, line = 2.5)
plot.ecdf(ozone)
mtext(text = expression(hat(F)[n](x)), side = 2, line = 2.5)
plot(ozone.ecdf, xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
plot.ecdf(ozone)
plot(ozone.ecdf, xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
fivenum(ozone)
fivenum
?fivenum
summary(fivenum(ozone))
fivenum(ozone)
ozone.ordered <- sort(ozone)
ozone.ordered
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
n
1:n/n
?plot
fix(normal.ecdf)
abline(v=62.5, h=0.75)
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
abline(v=62.5)
abline(h=0.75)
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
abline(v=62.5, h=0.75)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=0)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=3)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=5)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=1)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=2)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=0)
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
abline(v=62.5, h=0.75)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=3)
plot(ozone.ordered, (1:n)/n, type = 's', ylim = c(0, 1), xlab = 'Sample Quantiles of Ozone', ylab = '', main = 'Empirical Cumluative Distribution\nOzone Pollution in New York')
abline(v=62.5, h=0.75)
legend(65, 0.7, '3rd Quartile = 63.5', box.lwd=0)
mtext(text = expression(hat(F)[n](x)), side = 2, line = 2.5)
fix(normal.ecdf)
x <- seq(-1.5, 1.5, by=0.01)
uniform1 <- dunif(x, min=-0.25, max=0.25)
uniform2 <- dunif(x, min=-1.0, max=1.0)
head(uniform1)
tail(uniform1)
tail(uniform2)
head(uniform2)
head(x)
tail(x)
x <- seq(-1.5, 1.5, by=0.01)
uniform1 <- dunif(x, min=-0.25, max=0.25)
uniform2 <- dunif(x, min=-1.0, max=1.0)
plot(x, uniform1)
plot(x, uniform1, type='l')
plot(x, uniform1, type='l', ylab='f(x)', xlab='x')
plot(x, uniform1, type='l', ylab='f(x)', xlab='x', main = '2 Uniform Kernels with Different Bandwidths', col = 'red')
lines(x, uniform2, col='blue')
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
legend(0.1, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
norm1 <- dnorm(x, min=-0.25, max=0.25)
norm1 <- dnorm(x, mean=x, sd=1)
norm1
norm2 <- dnorm(x, mean=0, sd=2)
norm2
plot(norm2)
x <- seq(-3, 3, by=0.05)
uniform1 <- dunif(x, min=-0.25, max=0.25)
uniform2 <- dunif(x, min=-1.0, max=1.0)
norm1 <- dnorm(x, mean=x, sd=1)
norm2 <- dnorm(x, mean=0, sd=2)
norm2
plot(norm2)
x <- seq(-5, 5, by=0.05)
uniform1 <- dunif(x, min=-0.25, max=0.25)
uniform2 <- dunif(x, min=-1.0, max=1.0)
norm1 <- dnorm(x, mean=x, sd=1)
norm1 <- dnorm(x, mean=x, sd=1)
norm2 <- dnorm(x, mean=0, sd=2)
norm2
plot(norm2)
plot(norm1)
norm1 <- dnorm(x, mean=0, sd=1)
plot(norm1)
plot(norm2)
plot(x, norm1, type='l', ylab='f(x)', xlab='x', main = '2 Gaussian Kernels with Different Bandwidths', col = 'red')
# add plot of second kernel function
lines(x, norm2, col='blue')
# add legend
legend(0.28, 1.5, c('Normal(0, 1)', 'Normal(0, 2)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
x <- seq(-5, 5, by=0.05)
uniform1 <- dunif(x, min=-0.25, max=0.25)
uniform2 <- dunif(x, min=-1.0, max=1.0)
plot(x, uniform1, type='l', ylab='f(x)', xlab='x', main = '2 Uniform Kernels with Different Bandwidths', col = 'red')
# add plot of second kernel function
lines(x, uniform2, col='blue')
# add legend
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
ozone <- airquality$Ozone
boxplot(ozone, ylab= 'Ozone (ppb)', main= 'Box Plot of Ozone in New York')
summary(ozone)
fivenum(ozone)
ozone2 <- rgamma(n, shape=mean.ozone^2 / var.ozone + 3, scale=var.ozone / mean.ozone + 3)
mean.ozone <- mean(ozone, na.rm=TRUE)
var.ozone <- var(ozone, na.rm=TRUE)
ozone2 <- rgamma(n, shape=mean.ozone^2 / var.ozone + 3, scale=var.ozone / mean.ozone + 3)
ozone2 = rgamma(n, shape = mean.ozone^2/var.ozone+3, scale = var.ozone/mean.ozone+3)
?boxplot
boxplot(ozone, ylab='Ozone (ppb)', names=c('New York'), main='Box Plots for NY and Ozonopolis')
boxplot(ozone, ozone2, ylab='Ozone (ppb)', names=c('New York'), main='Box Plots for NY and Ozonopolis')
boxplot(ozone, ozone2, ylab='Ozone (ppb)', names=c('New York', 'Ozonopolis'), main='Box Plots for NY and Ozonopolis')
boxplot(ozone, ozone2, ozone, ylab = 'Ozone (ppb)', names = c('New York', 'Ozonopolis', 'NY'), main = 'Box Plots for New York and Ozonopolis')
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', names = c('New York', 'Ozonopolis'), main = 'Box Plots for New York and Ozonopolis')
boxplot(ozone, ozone2, xlab = 'Ozone (ppb)', names = c('New York', 'Ozonopolis'), main = 'Box Plots for New York and Ozonopolis', horizontal = T)
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(1, at = c(1,2), labels = c('New York', 'Ozonopolis'))
axis(1, at = c(2, 1), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(1, at = c(2, 1), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(2, at = c(2, 1), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(2, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(1, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'y', main = 'Box Plots for New York and Ozonopolis')
?boxplot
axis(3, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'y', main = 'Box Plots for New York and Ozonopolis')
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(3, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
axis(4, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
rm(list=ls())
ozone <- airquality$Ozone
boxplot(ozone, ylab= 'Ozone (ppb)', main= 'Box Plot of Ozone in New York')
summary(ozone)
fivenum(ozone)
set.seed(1)
mean.ozone <- mean(ozone, na.rm=TRUE)
var.ozone <- var(ozone, na.rm=TRUE)
ozone2 <- rgamma(n, shape=mean.ozone^2 / var.ozone + 3, scale=var.ozone / mean.ozone + 3)
n <- sum(is.na(ozone))
ozone2 <- rgamma(n, shape=mean.ozone^2 / var.ozone + 3, scale=var.ozone / mean.ozone + 3)
boxplot(ozone, ozone2, ylab='Ozone (ppb)', names=c('New York', 'Ozonopolis'), main='Box Plots for NY and Ozonopolis')
boxplot(ozone, ozone2, xlab = 'Ozone (ppb)', names = c('New York', 'Ozonopolis'), main = 'Box Plots for New York and Ozonopolis', horizontal = T)
boxplot(ozone, ozone2, ylab = 'Ozone (ppb)', xaxt = 'n', main = 'Box Plots for New York and Ozonopolis')
axis(1, at = c(1, 2), labels = c('New York', 'Ozonopolis'))
```
boxplot(ozone, ozone2, notch = T, ylab = 'Ozone (ppb)', names = c('New York', 'Ozonopolis'), main = 'Box Plots with Notches for New York and Ozonopolis', col = c('blue', 'red'))
atmospheric.nitrogen = c(2.31017, 2.30986, 2.31010, 2.31001, 2.31024, 2.31010, 2.31028, NA)
chemical.nitrogen = c(2.30143, 2.29890, 2.29816, 2.30182, 2.29869, 2.29940, 2.29849, 2.29869)
nitrogen.masses = data.frame(atmospheric.nitrogen, chemical.nitrogen)
colnames(nitrogen.masses) = c('Nitrogen from Air', 'Nitrogen from Chemical Decomposition')
atmospheric.nitrogen
chemical.nitrogen
nitrogen.masses
boxplot(nitrogen.masses, main = "Lord Rayleigh''s Measured Masses of Nitrogen", ylab = 'Mass (g)')
t.test(atmospheric.nitrogen, chemical.nitrogen)
