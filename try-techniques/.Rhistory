}
my.df <- my.df[1:count, ]
my.df
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print(paste('this.N=', this.N)}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print(paste('this.N=', this.N))}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
my.df <- my.df[1:count, ]
my.df
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
n <- 3
current.N <- 10 * n
my.df <- data.frame(a=character(current.N), b=numeric(current.N), stringsAsFactors=FALSE)
count <- 0
for(i in 1:n) {
this.N <- rpois(1, 10)
print(paste('this.N=', this.N))
if (count + this.N > current.N) {
old.df <- my.df
current.N <- round(1.5 * (current.N + this.N))
my.df <- data.frame(a=character(current.N),
b=numeric(current.N), stringsAsFactors=FALSE)
my.df[1:count, ] <- old.df[1:count, ]
} else {print('did not add rows')}
my.df[count + 1:this.N, ] <- data.frame(a=sample(letters, this.N, replace=TRUE),
b=runif(this.N), stringsAsFactors=FALSE)
count <- count + this.N
}
# my.df <- my.df[1:count, ]
my.df
?one.zillion
?hit
my.list <- vector('list', n)
this.N <- rpois(1, 10)
my.list <- vector('list', n)
for(i in 1:n) {
this.N <- rpois(1, 10)
my.list[[i]] <- data.frame(a=sample(letters, this.N, replace=TRUE), b=runif(this.N), stringsAsFactors=FALSE)
}
my.df <- do.call('rbind', my.list)
my.df
?do.call
?cat
cat('point 1 mem', memory.size(), memory.size(max=TRUE), '\n')
?Rprof
??Memory-limi
??Memory-limits
??Memo
?outer
?integrate
max(2, 100)
mean(2, 100)
mean(c(2, 100))
mean(100, 2)
mean(c(100, 2), 3)
mean(c(100, 2), c(3))
mean(c((c(100, 2), c(3))))
mean(c(c(100, 2), c(3)))
mean(c(c(100, 1), c(1)))
?all.equal
seq(10, by=2)
seq(1, 10, by=2)
seq(1, 11, by=2)
seq(2, 11, by=2)
b1 <- seq(1, 11, by=2)
b2 <- seq(2, 11, by=2)
all.equal(b1, b2)
b1 <- seq(1, 10, by=2)
b2 <- seq(2, 10, by=2)
all.equal(b1, b2)
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, 1))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .01))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .1))
sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
count(sample(1:3,size=20,replace=TRUE,prob=c(.2, .8, .3)))
data(iris)
iris$Species
head(iris)
textfile <- 'data/pg100.txt'
if (!file.exists(textfile)) {
download.file('http://www.gutenberg.org/cache/epub/100/pg100.txt', destfile=textfile)
}
if (!file.exists(textfile)) {
download.file('http://www.gutenberg.org/cache/epub/100/pg100.txt', destfile=textfile)
}
shakespeare=readLines(textfile)
length(shakespeare)
head(shakespeare)
tail(shakespeare)
shakespeare <- shakespeare[-(1:173)]
head(shakespeare)
shakespeare <- shakespeare[-(124195:length(shakespeare))]
tail(shakespeare)
v <- letters[1:10]
v
paste(v, collapse=':')
shakespeare <- paste(shakespeare, collapse=' ')
nchar(shakespeare)
s1 <- strsplit(shakespeare, "<<[^>]*>>")[[1]]
str(s1)
s1[[1]]
s1[[2]]
s1[[3]]
length(shakespeare)
length(shakespeare[[1]])
length(s1[[1]])
length(s1)
s1 <- strsplit(shakespeare, "<<[^>]*>>")
str(s1)
shakespeare <- strsplit(shakespeare, "<<[^>]*>>")[[1]]
length(shakespeare)
(dramatis.personae <- grep('Dramatis Personae', shakespeare, ignore.case=TRUE))
length(shakespeare)
shakespeare <- shakespeare[-dramatis.personae]
length(shakespeare)
library(tm)
install.packages('tm')
library(tm)
doc.vec <- VectorSource(shakespeare)
class(doc.vec)
str(doc.vec)
doc.corpus <- Corpus(doc.vec)
class(doc.corpus)
str(doc.corpus)
summary(doc.corpus)
?stopwords
stopwords('english')
doc.corpus <- tm_map(doc.corpus, tolower)
doc.corpus <- tm_map(doc.corpus, removePunctuation)
doc.corpus <- tm_map(doc.corpus, removeNumbers)
doc.corpus <- tm_map(doc.corpus, removeWords, stopwords('english'))
library(SnowballC)
install.packages('SnowballC')
doc.corpus <- tm_map(doc.corpus, stemDocument)
doc.corpus <- tm_map(doc.corpus, stripWhitespace)
inspect(doc.corpus[8])
head(inspect(doc.corpus[8]))
tdm <- TermDocumentMatrix(doc.corpus)
tdm
inspect(tdm[1:10, 1:10])
dtm <- DocumentTermMatrix(doc.corpus)
inspect(dtm[1:10,1:10])
findFreqTerms(tdm, 2000)
findAssocs(tdm, 'love', 0.8)
tdm.common <- removeSparseTerms(tdm, 0.1)
dim(tdm)
dim(tdm.common)
inspect(tdm.common[1:10, 1:10])
library(slam)
tdm.dense <- as.matrix(tdm.common)
object.size(tdm.common)
object.size(tdm.dense)
tdm.dense <- melt(tdm.dense, value.name='count')
library(reshape2)
tdm.dense <- melt(tdm.dense, value.name='count')
tdm.d <- melt(tdm.dense)
head(tdm.dense)
head(tdm.d)
library(ggplot2)
ggplot(tdm.dense, aes(x=Docs, y=Terms, fill=log10(count))) +
geom_tile(colour='white') +
scale_fill_gradient(high='#FF0000', low='#FFFFFF') +
ylab('') +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nosql.df <- read.csv("nosql.csv", header=TRUE)
head(nosql)
head(nosql.df)
source('~/.active-rstudio-document', echo=TRUE)
nosql.df$Database <- factor(nosql.df$Database,
levels=c("Cassandra","MongoDB","Redis","HBase","CouchDB",
"Neo4j","Riak","MarkLogic","Couchbase","DynamoDB"))
gg <- ggplot(data=nosql.df, aes(x=Quarter, y=Index))
gg <- gg + geom_point(aes(color=Quarter), size=3)
gg <- gg + facet_grid(Database~.)
gg <- gg + theme_bw()
gg <- gg + labs(x="", title="NoSQL LinkedIn Skills Index\nSeptember 2013")
gg <- gg + theme(legend.position = "none")
gg <- gg + theme(strip.text.x = element_blank())
gg
gg <- gg + coord_flip()
gg
gg <- ggplot(data=nosql.df, aes(x=Quarter, y=Index))
gg <- gg + geom_point(aes(color=Quarter), size=3)
gg <- gg + facet_grid(Database~.)
gg <- gg + coord_flip()
gg <- gg + labs(x="", title="NoSQL LinkedIn Skills Index\nSeptember 2013")
gg <- gg + theme(legend.position = "none")
gg <- gg + theme(strip.text.x = element_blank())
gg
gg + theme_bw()
gg
require(reshape2)
require(ggplot2)
df <- data.frame(Butterfinger = rnorm(50, 25, 10),
Snickers = rnorm(50, 75, 20),
Skor = rnorm(50, 115, 35),
AlmondJoy = rnorm(50, 45, 5))
head(df)
df.melt <- melt(df)
df.melt$variable <- factor(df.melt$variable,
levels=c('Snickers', 'Skor', 'AlmondJoy', 'Butterfinger'))
head(df.melt)
ggplot(df.melt, aes(x=variable, y=value)) + geom_boxplot()
levels(df.melt$variable)
sort(levels(df.melt$variable))
df.melt$variable <- factor(df.melt$variable,
levels=sort(levels(df.melt$variable)))
ggplot(df.melt, aes(x=variable, y=value)) + geom_boxplot()
gg
hjustvjust <- expand.grid(
hjust=c(0, 0.5, 1),
vjust=c(0, 0.5, 1),
angle=c(0, 45, 90),
text="is-R"
)
hv <- ggplot(hjustvjust, aes(x=hjust, y=vjust)) +
geom_point() +
geom_text(aes(label=text, angle=angle, hjust=hjust, vjust=vjust)) +
facet_grid(~angle) +
scale_x_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) +
scale_y_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) + theme_bw()
hv + labs(title="Various values of angle, hjust and vjust in ggplot \n", y ="vjust \n", x =" \n hjust") +
theme(axis.text.x = element_text(colour="black",
size = 12,
face = "bold") ,
axis.text.y = element_text(colour="black",
size = 12,
face = "bold"),
axis.title.x = element_text(face="plain",
colour="black",
size=24),
axis.title.y = element_text(face="plain",
colour="black",
size=24),
plot.title = element_text(face="bold",
colour="black",
size=18))
hjustvjust <- expand.grid(
hjust=c(0, 0.5, 1),
vjust=c(0, 0.5, 1),
angle=c(0, 45, 90),
text="is-R"
)
hjustvjust
library(ggplot2)
hv <- ggplot(hjustvjust, aes(x=hjust, y=vjust)) +
geom_point() +
geom_text(aes(label=text, angle=angle, hjust=hjust, vjust=vjust)) +
facet_grid(~angle) +
scale_x_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) +
scale_y_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) + theme_bw()
hv + labs(title="Various values of angle, hjust and vjust in ggplot \n", y ="vjust \n", x =" \n hjust") +
theme(axis.text.x = element_text(colour="black",
size = 12,
face = "bold") ,
axis.text.y = element_text(colour="black",
size = 12,
face = "bold"),
axis.title.x = element_text(face="plain",
colour="black",
size=24),
axis.title.y = element_text(face="plain",
colour="black",
size=24),
plot.title = element_text(face="bold",
colour="black",
size=18))
DF <- data.frame(x=LETTERS[1:3],y=1:3)
p <- ggplot(DF, aes(x,y)) + geom_point() +
ylab("Very long label for y") +
opts(axis.title.y=theme_text(angle=0))
p <- ggplot(DF, aes(x,y)) + geom_point() +
ylab("Very long label for y") +
theme(axis.title.y=theme_text(angle=0))
p <- ggplot(DF, aes(x,y)) + geom_point() +
ylab("Very long label for y") +
theme(axis.title.y=element_text(angle=0))
p
p1 <- p + theme(axis.title.x=element_text(hjust=0)) + xlab("X-axis at hjust=0")
p2 <- p + theme(axis.title.x=element_text(hjust=0.5)) + xlab("X-axis at hjust=0.5")
p3 <- p + theme(axis.title.x=element_text(hjust=1)) + xlab("X-axis at hjust=1")
library(ggExtra)
align.plots(p1, p2, p3)
install.packages('ggExtra')
library(ggExtra)
install.packages('ggExtra')
library(gridExtra)
install.packages('gridExtra')
library(gridExtra)
align.plots(p1, p2, p3)
p1
ls(package.gridExtra)
ls('package.gridExtra')
library(gridExtra)
align.plots(p1, p2, p3)
ls(package.gridExtra)
ls('package.gridExtra')
p1 <- p + theme(axis.title.x=element_text(hjust=0)) + xlab("X-axis at hjust=0")
p2 <- p + theme(axis.title.x=element_text(hjust=0.5)) + xlab("X-axis at hjust=0.5")
p1
p2
p3
library(gridExtra)
grid.arrange(p1, p2, p3, ncol=1)
DF <- data.frame(x=c("a\na","b","cdefghijk","l"),y=1:4)
p <- ggplot(DF, aes(x,y)) + geom_point()
p1 <- p + theme(axis.text.x=element_text(vjust=0, colour="red")) +
xlab("X-axis labels aligned with vjust=0")
p2 <- p + theme(axis.text.x=element_text(vjust=0.5, colour="red")) +
xlab("X-axis labels aligned with vjust=0.5")
p3 <- p + theme(axis.text.x=element_text(vjust=1, colour="red")) +
xlab("X-axis labels aligned with vjust=1")
library(gridExtra)
grid.arrange(p1, p2, p3, ncol=1)
fix(`p1`)
library(ggplot2) #for plotting
library(reshape2) #for data reshaping
library(gridExtra)
library(vegan) #for the data
data(varechem)
install.package('vegan')
install.packagew('vegan')
install.packages('vegan')
library(vegan) #for the data
vMelt<-melt(varechem, measure.vars=c("Humdepth", "Baresoil"))
qplot(value, data=vMelt, fill=variable)+facet_wrap( facets=~variable, scale="free_x")
data(varechem)
vMelt<-melt(varechem, measure.vars=c("Humdepth", "Baresoil"))
qplot(value, data=vMelt, fill=variable)+facet_wrap( facets=~variable, scale="free_x")
library(gridExtra)
#make two separate ggplot2 objects
humDist<-qplot(Humdepth, data=varechem, fill=I("red"))
bareDist<-qplot(Baresoil, data=varechem, fill=I("blue"))
#Now use grid.arrange to put them all into one figure.
#Note the use of ncol to specify two columns.  Things are nicely flexible here.
grid.arrange(humDist, bareDist, ncol=2)
source('~/.active-rstudio-document', echo=TRUE)
humDist<-qplot(Humdepth, data=varechem, fill=I("red"))
bareDist<-qplot(Baresoil, data=varechem, fill=I("blue"))
humDist
bareDist
grid.arrange(humDist, bareDist, ncol=2)
```
bareDist<-qplot(Baresoil, data=varechem, fill=I("blue"))
library(gridExtra)
#make two separate ggplot2 objects
humDist<-qplot(Humdepth, data=varechem, fill=I("red"))
bareDist<-qplot(Baresoil, data=varechem, fill=I("blue"))
#Now use grid.arrange to put them all into one figure.
#Note the use of ncol to specify two columns.  Things are nicely flexible here.
grid.arrange(humDist, bareDist, ncol=2)
corPlot<-qplot(Humdepth, Baresoil, data=varechem, size=I(3))+stat_smooth(method="lm")
blankPanel<-grid.rect(gp=gpar(col="white"))
grid.arrange(humDist, blankPanel, corPlot, bareDist, ncol=2)
a<-anova(lm(Baresoil ~ Humdepth, data=varechem))
grid.table(round(a, digits=3))
tableGrob(rouind(a, digits=3))
tableGrob(round(a, digits=3))
grid.arrange(humDist, tbl, corPlot, bareDist, ncol=2)
tbl <- tableGrob(round(a, digits=3))
grid.arrange(humDist, tbl, corPlot, bareDist, ncol=2)
