#         warning(gettextf("attempt to set '%s' ignored", argname),
#             domain = NA)
#     rn <- eval.parent(Call$row.names)
#     Call$append <- NULL
#     Call$col.names <- if (is.logical(rn) && !rn)
#         TRUE
#     else NA
#     Call$sep <- ","
#     Call$dec <- "."
#     Call$qmethod <- "double"
#     Call[[1L]] <- as.name("write.table")
#     eval.parent(Call)
my.write.csv <- function (...) {
Call <- match.call(expand.dots = TRUE)
for (argname in c('append', 'col.names', 'sep', 'dec', 'qmethod'))
if (!is.null(Call[[argname]])) warning(gettextf("attempt to set '%s' ignored", argname), domain=NA)
#   Call
}
my.write.csv('abc', append=FALSE, sep=',', dec='no', junk=TRUE)
my.write.csv('abc', append=FALSE, sep=',', dec='no', junk=TRUE)
mean(1:10)
mean(mtcars)
mean
sd
var
sd <- function (x, na.rm = FALSE) {
if (is.matrix(x))
apply(x, 2, sd, na.rm = na.rm)
else if (is.vector(x))
sqrt(var(x, na.rm = na.rm))
else if (is.data.frame(x))
sapply(x, sd, na.rm = na.rm)
else sqrt(var(as.vector(x), na.rm = na.rm))
}
vs <- 1:10
sd(vs)
var(vs)
sqrt(var(vs))
dir()
ls()
vs
count(vs)
library(plyr)
count(vs)
count(vs)$freq
?context
?UseMethod
structure(1:10, min = 0, max = 10,
class = "minmax")
s <- structure(1:10, min = 0, max = 10,
class = "minmax")
str(s)
class(s)
s
?is.numeric
?stop
?structure
s
names(s)
s$min
s[['min']]
s[[min]]
s[['min']]
min(s)
max(s)
s
class(s)
sd(s)
range(s)
s
data(s)
.Data(s)
structure(1:6, dim=2:3)
s2 <- structure(1:6, dim=2:3)
class(s2)
names(s2)
dim(s2)
s2$dim
s3[['dim']]
s2[['dim']]
minmax(1:10)
minmax <- function(x, minx = min(x), maxx = max(x)) {
stopifnot(is.numeric(x))
structure(x, min = minx, max = maxx,
class = "minmax")
}
minmax(1:10)
minmax(1:30)
minmax(1:10)
?inherits
is.minmax <- function(x) {
inherits(x, "minmax")
}
a
a <- minmax(1:15)
a
inherits(a, 'minmax')
inherits(a, 'numeric')
is.minmax <- function(x) {
inherits(x, "minmax")
}
is.minmax(minmax(1:10))
print
a
attr(a, 'min')
attr(a, 'max')
print.default
print.minmax <- function(x, ...) {
print.default(as.numeric(x))
cat("Range: [", attr(x, "min"), ", ",
attr(x, "max"), "]\n", sep = "")
}
minmax(1:10)
o
o <- minmax(1:10)
o
str(o)
attr(o, )
attr(o, 'min')
attr(o, 'data')
attr(o, '.Data')
attr(o, 'atomic')
o[[1]]
o[[0]]
mod <- glm(log(mpg) ~ log(disp), data = mtcars)
class(mod)
class(mod) <- "lm"
class(mod)
mod
class(mod) <- "table"
mod
mod <- glm(log(mpg) ~ log(disp), data = mtcars)
mod
str(mod)
att(mod, 'class')
attr(mod, 'class')
mod$xlevels
mod$control$epsilon
mod$control
att(mod, 'names')
attr(mod, 'names')
names(mod)
str(mod)
attr(mod, 'variables')
attr(mod$terms, 'variables')
variables(mod$terms)
mod$terms
intercept(mod$terms)
attr(mod$terms, 'intercept')
names(mod$fitted.values)
minmax(1:10)
minmax
minmax(1:10, maxx=5)
minmax(1:10, max=5)
?stopifnot
?all
a <- minmax(1:10, max=20)
a
range(a)
max(a)
minmax <- function(x, minx = min(x), maxx = max(x)) {
stopifnot(is.numeric(x))
stopifnot(all(minx <= x))
stopifnot(all(maxx >= x))
structure(x, min = minx, max = maxx,
class = "minmax")
}
minmax(1:10, max = 5)
max.minmax <- function(..., na.rm=FALSE) {
parts <- list(...)
if (length(parts) == 1) {
attr(parts[[1]], 'max')
} else {
stop ('Maximum of more than one minmax not implemented')
}
}
max(a)
a
?mod
mod <- lm(mpg ~ wt, data = mtcars)
unlist(mod)
mod <- lm(mpg ~ wt, data = mtcars)
mod
str(mod)
v <- unlist(mod)
v
head(v)
attributes(v)
str(attributes(v))
attributes(mod)
dim(mod)
mod$dim
dim(v)
str(attributes(v))
?setNames
letters(1:3)
?letters
letters[1:3]
setNames(1:3, letters[1:3])
v <- setNames(1:3, letters[1:3])
v
str(v)
attributes(v)
x <- factor(c("a", "b", "b", "a"))
str(x)
attributes(x)
levels(x)
attr(x, 'levels')
attr(x, 'class')
attr(x, 'class')
class(x)
levels(x) <- c('c', 'd')
x
x <- factor(c("a", "b", "b", "a"))
x
levels(x) <- c('b', 'a')
x
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
sex_char <- c("m", "m", "m")
sec_char
sex_char <- c("m", "m", "m")
sec_char
sex_char
attributes(sex_char)
sex_factor <- factor(sex_char, levels = c("m", "f"))
sex_char
attributes(sex_char)
sex_factor
attributes(sex_factor)
table(sex_char)
table(sex_factor)
z <- factor(c(12, 1, 9))
z
as.numeric(z)
as.character(z)
as.numeric(as.character(z))
a <- matrix(1:6, ncol=3)
a
attributes(a)
dm(a <- c(3, 2))
dim(a <- c(3, 2))
dim(a) <- c(3, 2)
c <- 1:6
dim(c) <- c(3,2)
c
a
a <- matrix(1:6, ncol=3)
a
attributes(a)
attr(a, 'dim') <- c(3, 2)
a
dim(c) <- c(2, 3)
c
dim(a)
a
dim(a) <- c(2, 3)
a
?array
array(1:3)
a <- array(1:3)
str(a)
class(a)
b <- array(1:3, 3)
b
class(b)
str(b)
df <- data.frame(x=1:3, y=letters[1:3])
df
str(df)
attributes(df)
colnames(df)
names(df)
attr(df, 'colnames')
attr(df, 'names')
length(df)
attr(df, 'length')
nrow(df)
ncol(df)
dim(df)
typeof(df)
class(df)
is.data.frame(df)
is.list(df)
df <- data.frame(x=1:3, y=list(1:2, 1:3, 1:4))
df
df <- data.frame(x=1:3)
df
df$y <- list(1:2, 1:3, 1:4)
df
str(df)
df[2, 'y']
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df['x']
df[1]
df[2]
df[2, 3]
df[2, 'z']
df[c('x' , 'z', 'x')]
mtcars(mtcars$cyl=4,)
mtcars[mtcars$cyl=4,]
mtcars[mtcars$cyl==4,]
mtcars[-1:4,]
mtcars[-c(1:4),]
mtcars
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5,]
mtcars[mtcars$cyl == 4 | 6,]
mtcars[mtcars$cyl == (4 | 6),]
mtcars[(mtcars$cyl == 4) | mtcars$cyl == 6),]
mtcars[(mtcars$cyl == 4) | (mtcars$cyl == 6),]
mtcars[mtcars$cyl %in% c(4, 6) ,]
x <- 1:5; x[NA]
x <- 1:5
x
x[NA]
x
x[NA_real_]
?NA
?NA_real_
?upper.tri
max.minmax <- function(..., na.rm=FALSE) {
parts <- list(...)
if (length(parts) == 1) {
attr(parts[[1]], 'max')
} else {
max(vapply(parts, 'min', numeric(1)))
}
}
min.minmax <- function(..., na.rm=FALSE) {
parts <- list(...)
if (length(parts) == 1) {
attr(parts[[1]], 'min')
} else {
max(vapply(parts, 'min', numeric(1)))
}
}
range.minmax <- function(..., na.rm = FALSE) {
c(min(..., na.rm=TRUE), max(..., na.rm=TRUE))
}
a <- minax(1:10, max=20)
minmax <- function(x, minx = min(x), maxx = max(x)) {
stopifnot(is.numeric(x))
stopifnot(all(minx <= x))
stopifnot(all(maxx >= x))
structure(x, min = minx, max = maxx,
class = "minmax")
}
a <- minax(1:10, max=20)
a <- minmax(1:10, max=20)
str(a)
attributes(a)
a
a[1:5]
match.fun('[')
?'['
'[.minmax' <- function(x, ...) {
minmax(NextMethod(), minx=attr(x, 'min'),
maxx=atr(x, 'max'))
}
min(a)
max(a)
?min.minmax
??min.minmax
min.minmax
attributes(minax)
attributes(minmax)
str(minmax)
rbinom(5, 1, 3/5)
n <- 20
m <- 5
rbinom(n=10, 1, .5)
rbinom(n=10, 1, .8)
rbinom(n=10, 1, .7)
sum(rbinom(n=10, 1, .7))
sum(rbinom(n=10, 1, .7))
sum(rbinom(n=10, 1, .7))
sum(rbinom(n=10, 1, .7))
sum(rbinom(n=10, 1, .7))
sum(rbinom(n=10, size=3, .7))
rbinom(n=10, 3, .7)
rbinom(n=10, 3, .5)
rbinom(n=10, 3, .5)
rbinom(n=10, 3, .5)
rbinom(n=10, 3, .7)
rbinom(n=10, 3, .7)
rbinom(n=10, 3, .7)
mu
ls()
m <- 5
m/n
rbinom(n, 1, m/n)
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
n <- 100
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
n <- 1000
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
sum(rbinom(n, 1, m/n))
DrawsApprox <- function(mu, N) sum(rbinom(N, 1, mu/N))
DrawsApprox(9, 9)
DrawsApprox(9, 18)
evar <- function(fun, draw=100, outc=NULL, ...) { for(i in 1:draw) outc <- c(outc, get(fun)(...)); list(outc=outc, mean=mean(outc), var=var(outc))}
evar
evar('DrawsApprox', draw=1000, N=18, mu=9)
res <- evar('DrawsApprox', draw=1000, N=18, mu=9)
str(res)
attributes(res)
res[[mean]]
res[['mean']]
res['mean']
res <- evar('DrawsApprox', draw=1000, N=36, mu=9)
res
str(res)
res <- evar('DrawsApprox', draw=1000, N=72, mu=9)
res[-1]
evar('DrawsApprox', draw=1000, N=72, mu=9)[-1]
evar('DrawsApprox', draw=1000, N=144, mu=9)[-1]
bigdraw <- evar("DrawsApprox", draw=10000, N=1000, mu=9)
summary(bigdraw)
rm(summar)
rm(summary)
summary(bigdraw)
rm(summary())
?summary
base.summary(bigdraw)
summary
body(summary)
environment(summary)
formals(summary)
fix(is.minmax)
install.packages('devtools', dependencies=TRUE)
library(devtools)
has_devel()
getcwd()
cwd()
get_cwd()
?cwd
??cwd
setwd("~/Development/moose-drool/rpackages")
getwd()
create('mypackage')
load_all()
getwd()
?stopifnot
system.time(getwd())
system.time(rnorm(100000))
system.time(rnorm(1000000))
system.time(rnorm(10000000))
system.time(rnorm(10000000))
system.time(rnorm(10000000))
system.time(rnorm(1000000000))
roxygenize()
library(roxygen)
?vaggregate
?tabulate
load_all('mypackage')
load_all('mypackage')
load_all('mypackage')
getOptions('devtools.desc.author')
?getOptions
??getOptions
??getOptions
load_all('mypackage')
load_all('mypackage')
dir()
ls()
ls('mypackage')
ls(mypackage)
ls()
rm(list=ls())
library(devtools)
load_all('mypackage')
ls()
?package
??package
installed.packages()
library()
library.packages()
.packages()
.Library()
.Library
objects
objects()
search()
load_all('stringr')
test('mypackage')
document('mypackage')
?mypackage
mypackage()
load_all('mypackage')
?mypackage
??mupackage
??mypackage
package?mypackage
search()
?mypackage
document('mypackage')
?mypackage
package?mypackage
?package:mypackage
